// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplicationMustToHave.Repository;

#nullable disable

namespace WebApplicationMustToHave.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241124201322_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbBitrate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Bitrates");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbComposition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("VolumeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("YearBirth")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VolumeId");

                    b.ToTable("Compositions");

                    b.HasDiscriminator().HasValue("DbComposition");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbGenre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("DbCompositionId")
                        .HasColumnType("bigint");

                    b.Property<int>("GenreType")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DbCompositionId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbMeasureUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeasureUnits");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbPerson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("DbAudioBookId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DbBookId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DbFilmId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DbFilmId1")
                        .HasColumnType("bigint");

                    b.Property<long?>("DbSongId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DbSongId1")
                        .HasColumnType("bigint");

                    b.Property<long?>("DbSongId2")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("YearBirth")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DbAudioBookId");

                    b.HasIndex("DbBookId");

                    b.HasIndex("DbFilmId");

                    b.HasIndex("DbFilmId1");

                    b.HasIndex("DbSongId");

                    b.HasIndex("DbSongId1");

                    b.HasIndex("DbSongId2");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbPublishing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("DbCompositionId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<long>("VersionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DbCompositionId");

                    b.HasIndex("VersionId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbRatingVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RatingVersions");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbResolution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Height")
                        .HasColumnType("bigint");

                    b.Property<long>("Width")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Resolutions");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbVolume", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Volumes");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbAudioBook", b =>
                {
                    b.HasBaseType("WebApplicationMustToHave.DataModels.DbComposition");

                    b.Property<long?>("BitrateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PerformerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PublishingId")
                        .HasColumnType("bigint");

                    b.HasIndex("BitrateId");

                    b.HasIndex("PerformerId");

                    b.HasIndex("PublishingId");

                    b.ToTable("Compositions", t =>
                        {
                            t.Property("PublishingId")
                                .HasColumnName("DbAudioBook_PublishingId");
                        });

                    b.HasDiscriminator().HasValue("DbAudioBook");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbBook", b =>
                {
                    b.HasBaseType("WebApplicationMustToHave.DataModels.DbComposition");

                    b.Property<int?>("Binder")
                        .HasColumnType("int");

                    b.Property<long?>("Density")
                        .HasColumnType("bigint");

                    b.Property<long?>("PublishingId")
                        .HasColumnType("bigint");

                    b.HasIndex("PublishingId");

                    b.HasDiscriminator().HasValue("DbBook");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbFilm", b =>
                {
                    b.HasBaseType("WebApplicationMustToHave.DataModels.DbComposition");

                    b.Property<long?>("BitrateAudioId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BitrateVideoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResolutionId")
                        .HasColumnType("bigint");

                    b.HasIndex("BitrateAudioId");

                    b.HasIndex("BitrateVideoId");

                    b.HasIndex("ResolutionId");

                    b.HasDiscriminator().HasValue("DbFilm");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbSong", b =>
                {
                    b.HasBaseType("WebApplicationMustToHave.DataModels.DbComposition");

                    b.Property<long?>("BitrateId")
                        .HasColumnType("bigint");

                    b.HasIndex("BitrateId");

                    b.ToTable("Compositions", t =>
                        {
                            t.Property("BitrateId")
                                .HasColumnName("DbSong_BitrateId");
                        });

                    b.HasDiscriminator().HasValue("DbSong");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbBitrate", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbMeasureUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbComposition", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbVolume", "Volume")
                        .WithMany()
                        .HasForeignKey("VolumeId");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbGenre", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbComposition", null)
                        .WithMany("Genres")
                        .HasForeignKey("DbCompositionId");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbPerson", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbAudioBook", null)
                        .WithMany("Authors")
                        .HasForeignKey("DbAudioBookId");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbBook", null)
                        .WithMany("Authors")
                        .HasForeignKey("DbBookId");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbFilm", null)
                        .WithMany("Actors")
                        .HasForeignKey("DbFilmId");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbFilm", null)
                        .WithMany("Directors")
                        .HasForeignKey("DbFilmId1");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbSong", null)
                        .WithMany("Authors")
                        .HasForeignKey("DbSongId");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbSong", null)
                        .WithMany("Composers")
                        .HasForeignKey("DbSongId1");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbSong", null)
                        .WithMany("Performers")
                        .HasForeignKey("DbSongId2");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbRating", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbComposition", null)
                        .WithMany("Ratings")
                        .HasForeignKey("DbCompositionId");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbRatingVersion", "Version")
                        .WithMany()
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbVolume", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbMeasureUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbAudioBook", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbBitrate", "Bitrate")
                        .WithMany()
                        .HasForeignKey("BitrateId");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbPerson", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbPublishing", "Publishing")
                        .WithMany()
                        .HasForeignKey("PublishingId");

                    b.Navigation("Bitrate");

                    b.Navigation("Performer");

                    b.Navigation("Publishing");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbBook", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbPublishing", "Publishing")
                        .WithMany()
                        .HasForeignKey("PublishingId");

                    b.Navigation("Publishing");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbFilm", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbBitrate", "BitrateAudio")
                        .WithMany()
                        .HasForeignKey("BitrateAudioId");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbBitrate", "BitrateVideo")
                        .WithMany()
                        .HasForeignKey("BitrateVideoId");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbResolution", "Resolution")
                        .WithMany()
                        .HasForeignKey("ResolutionId");

                    b.Navigation("BitrateAudio");

                    b.Navigation("BitrateVideo");

                    b.Navigation("Resolution");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbSong", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbBitrate", "Bitrate")
                        .WithMany()
                        .HasForeignKey("BitrateId");

                    b.Navigation("Bitrate");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbComposition", b =>
                {
                    b.Navigation("Genres");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbAudioBook", b =>
                {
                    b.Navigation("Authors");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbBook", b =>
                {
                    b.Navigation("Authors");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbFilm", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Directors");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbSong", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Composers");

                    b.Navigation("Performers");
                });
#pragma warning restore 612, 618
        }
    }
}
