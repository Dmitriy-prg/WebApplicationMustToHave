// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplicationMustToHave.Repository;

#nullable disable

namespace WebApplicationMustToHave.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241128131747_Migration241128")]
    partial class Migration241128
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DbComposition_Authors_DbPerson", b =>
                {
                    b.Property<long>("AuthorsId")
                        .HasColumnType("bigint");

                    b.Property<long>("DbComposition_AuthorsId")
                        .HasColumnType("bigint");

                    b.HasKey("AuthorsId", "DbComposition_AuthorsId");

                    b.HasIndex("DbComposition_AuthorsId");

                    b.ToTable("DbComposition_Authors_DbPerson");
                });

            modelBuilder.Entity("DbComposition_Composers_DbPerson", b =>
                {
                    b.Property<long>("ComposersId")
                        .HasColumnType("bigint");

                    b.Property<long>("DbComposition_ComposersId")
                        .HasColumnType("bigint");

                    b.HasKey("ComposersId", "DbComposition_ComposersId");

                    b.HasIndex("DbComposition_ComposersId");

                    b.ToTable("DbComposition_Composers_DbPerson");
                });

            modelBuilder.Entity("DbComposition_Directors_DbPerson", b =>
                {
                    b.Property<long>("DbComposition_DirectorsId")
                        .HasColumnType("bigint");

                    b.Property<long>("DirectorsId")
                        .HasColumnType("bigint");

                    b.HasKey("DbComposition_DirectorsId", "DirectorsId");

                    b.HasIndex("DirectorsId");

                    b.ToTable("DbComposition_Directors_DbPerson");
                });

            modelBuilder.Entity("DbComposition_Performers_DbPerson", b =>
                {
                    b.Property<long>("DbComposition_PerformersId")
                        .HasColumnType("bigint");

                    b.Property<long>("PerformersId")
                        .HasColumnType("bigint");

                    b.HasKey("DbComposition_PerformersId", "PerformersId");

                    b.HasIndex("PerformersId");

                    b.ToTable("DbComposition_Performers_DbPerson");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbBitrate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("DbMeasureUnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DbMeasureUnitId")
                        .IsUnique()
                        .HasFilter("[DbMeasureUnitId] IS NOT NULL");

                    b.ToTable("bitrates", (string)null);
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbBookBinder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("book_binders", (string)null);
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbComposition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("DbBitrate_BitrateAudioId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DbBitrate_BitrateVideoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DbBookBinderId")
                        .HasColumnType("bigint");

                    b.Property<long>("DbCompositionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DbPublishingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DbResolutionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DbVolumeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Density")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("YearBirth")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DbBitrate_BitrateAudioId")
                        .IsUnique()
                        .HasFilter("[DbBitrate_BitrateAudioId] IS NOT NULL");

                    b.HasIndex("DbBitrate_BitrateVideoId")
                        .IsUnique()
                        .HasFilter("[DbBitrate_BitrateVideoId] IS NOT NULL");

                    b.HasIndex("DbCompositionTypeId")
                        .IsUnique();

                    b.HasIndex("DbPublishingId")
                        .IsUnique()
                        .HasFilter("[DbPublishingId] IS NOT NULL");

                    b.HasIndex("DbResolutionId")
                        .IsUnique()
                        .HasFilter("[DbResolutionId] IS NOT NULL");

                    b.HasIndex("DbVolumeId")
                        .IsUnique()
                        .HasFilter("[DbVolumeId] IS NOT NULL");

                    b.ToTable("compositions", (string)null);
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbCompositionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("composition_types", (string)null);
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbGenre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("DbCompositionId")
                        .HasColumnType("bigint");

                    b.Property<long>("DbGenreTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DbCompositionId");

                    b.HasIndex("DbGenreTypeId")
                        .IsUnique();

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbGenreType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("genre_types", (string)null);
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbMeasureUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("measure_units", (string)null);
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbPerson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("YearBirth")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbPublishing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("publishers", (string)null);
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("DbCompositionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DbRatingVersionId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DbCompositionId");

                    b.HasIndex("DbRatingVersionId")
                        .IsUnique()
                        .HasFilter("[DbRatingVersionId] IS NOT NULL");

                    b.ToTable("ratings", (string)null);
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbRatingVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("rating_versions", (string)null);
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbResolution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Height")
                        .HasColumnType("bigint");

                    b.Property<long>("Width")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("resolutions", (string)null);
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbVolume", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("DbMeasureUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DbMeasureUnitId")
                        .IsUnique()
                        .HasFilter("[DbMeasureUnitId] IS NOT NULL");

                    b.ToTable("volumes", (string)null);
                });

            modelBuilder.Entity("DbComposition_Authors_DbPerson", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbPerson", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationMustToHave.DataModels.DbComposition", null)
                        .WithMany()
                        .HasForeignKey("DbComposition_AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbComposition_Composers_DbPerson", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbPerson", null)
                        .WithMany()
                        .HasForeignKey("ComposersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationMustToHave.DataModels.DbComposition", null)
                        .WithMany()
                        .HasForeignKey("DbComposition_ComposersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbComposition_Directors_DbPerson", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbComposition", null)
                        .WithMany()
                        .HasForeignKey("DbComposition_DirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationMustToHave.DataModels.DbPerson", null)
                        .WithMany()
                        .HasForeignKey("DirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbComposition_Performers_DbPerson", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbComposition", null)
                        .WithMany()
                        .HasForeignKey("DbComposition_PerformersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationMustToHave.DataModels.DbPerson", null)
                        .WithMany()
                        .HasForeignKey("PerformersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbBitrate", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbMeasureUnit", "Unit")
                        .WithOne()
                        .HasForeignKey("WebApplicationMustToHave.DataModels.DbBitrate", "DbMeasureUnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbComposition", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbBitrate", "BitrateAudio")
                        .WithOne()
                        .HasForeignKey("WebApplicationMustToHave.DataModels.DbComposition", "DbBitrate_BitrateAudioId");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbBitrate", "BitrateVideo")
                        .WithOne()
                        .HasForeignKey("WebApplicationMustToHave.DataModels.DbComposition", "DbBitrate_BitrateVideoId");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbBookBinder", "Binder")
                        .WithOne()
                        .HasForeignKey("WebApplicationMustToHave.DataModels.DbComposition", "DbCompositionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationMustToHave.DataModels.DbCompositionType", "Type")
                        .WithOne()
                        .HasForeignKey("WebApplicationMustToHave.DataModels.DbComposition", "DbCompositionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationMustToHave.DataModels.DbPublishing", "Publishing")
                        .WithOne()
                        .HasForeignKey("WebApplicationMustToHave.DataModels.DbComposition", "DbPublishingId");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbResolution", "Resolution")
                        .WithOne()
                        .HasForeignKey("WebApplicationMustToHave.DataModels.DbComposition", "DbResolutionId");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbVolume", "Volume")
                        .WithOne()
                        .HasForeignKey("WebApplicationMustToHave.DataModels.DbComposition", "DbVolumeId");

                    b.Navigation("Binder");

                    b.Navigation("BitrateAudio");

                    b.Navigation("BitrateVideo");

                    b.Navigation("Publishing");

                    b.Navigation("Resolution");

                    b.Navigation("Type");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbGenre", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbComposition", null)
                        .WithMany("Genres")
                        .HasForeignKey("DbCompositionId");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbGenreType", "GenreType")
                        .WithOne()
                        .HasForeignKey("WebApplicationMustToHave.DataModels.DbGenre", "DbGenreTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenreType");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbRating", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbComposition", null)
                        .WithMany("Ratings")
                        .HasForeignKey("DbCompositionId");

                    b.HasOne("WebApplicationMustToHave.DataModels.DbRatingVersion", "Version")
                        .WithOne()
                        .HasForeignKey("WebApplicationMustToHave.DataModels.DbRating", "DbRatingVersionId");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbVolume", b =>
                {
                    b.HasOne("WebApplicationMustToHave.DataModels.DbMeasureUnit", "Unit")
                        .WithOne()
                        .HasForeignKey("WebApplicationMustToHave.DataModels.DbVolume", "DbMeasureUnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("WebApplicationMustToHave.DataModels.DbComposition", b =>
                {
                    b.Navigation("Genres");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
